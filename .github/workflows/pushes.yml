name: Test pushes to branches

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:

  testjob1:
    name: get tags data
    runs-on: ubuntu-latest
    outputs:
      # new_tag: ${{ steps.tag_version.outputs.new_tag }}
      # new_version: ${{ steps.tag_version.outputs.new_version }}
      # previous_tag: ${{ steps.tag_version.outputs.previous_tag }}
      # previous_version: ${{ steps.tag_version.outputs.previous_version }}
      # release_type: ${{ steps.tag_version.outputs.release_type }}
      # changelog: ${{ steps.tag_version.outputs.changelog }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      version_latest: ${{ steps.version_latest.outputs.version_latest }}
      already_released: ${{ steps.tag_version.outputs.version_latest == steps.current_version.outputs.current_version }}
      already_in_pypi: ${{ steps.check_in_pypi.outputs.pypi_versions != '' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: debug
        run: |
          pwd
          ls -la
          cat ./version
      - name: Get current version
        id: current_version
        run: echo "::set-output name=current_version::$(cat ./version)"
      # - name: Get tag data
        # id: tag_version
        # uses: mathieudutour/github-tag-action@v5.6
        # with:
        #   github_token: ${{ secrets.GITHUB_TOKEN }}
        #   # default_bump: false
        #   # custom_tag: "${{ steps.current_version.outputs.current_version }}"
        #   dry_run: true
      - name: Get latest tag
        id: version_latest
        run: |
          out="$(git describe --abbrev=0 --tags | cut -d'v' -f 2)"
          echo "$out"
          echo "::set-output name=version_latest::$out"
        shell: bash
      - name: check if already deployed
        id: check_in_pypi
        # Note. other options:
        #   - use 'pip install --no-deps PKG==VERSION' with current version
        #   - use 'pip index versions PKG==VERSION'
        #     (but it's a kind of experimental feature of pip >= 21.2)
        run: |
          python -m pip install --upgrade pip
          out="$(pip install --use-deprecated=legacy-resolver ${{ env.PKG_NAME }}== 2>&1 \
              | grep -E "Could not find .* ${{ steps.current_version.outputs.current_version }}(,|\))")"
          echo "::set-output name=pypi_versions::$out"
        shell: bash {0}  # to opt-out of default fail-fast behavior


  testjob2:
    name: dump data
    runs-on: ubuntu-latest
    needs: testjob1
    steps:
      - name: dump tags data
        run: |
          ! read -r -d '' msg << EOF
          testjob1 outputs
          ${{ toJson(needs.testjob1.outputs) }}
          ====================
          github context
          ${{ toJson(github) }}
          EOF
          echo "$msg"
          echo "===================="
          echo "environment"
          env

  testjob3:
    name: conditional on tags (skipped)
    runs-on: ubuntu-latest
    needs: testjob1
    if: needs.testjob1.outputs.already_released == 'true'
    steps:
      - name: just echo
        run: echo "Already released into GitHub"

  testjob4:
    name: GitHub Release Python
    runs-on: ubuntu-latest
    needs: testjob1
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.testjob1.outputs.already_released == 'false'
    steps:
      - uses: actions/checkout@v2
      - name: build dist
        run: |
          mkdir dist
          echo somedata | tee "dist/testpkg-${{ needs.testjob1.outputs.current_version }}-py3-none-any.whl" \
            "dist/testpkg-${{ needs.testjob1.outputs.current_version }}.tar.gz"
          ls dist
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          tag: v${{ needs.testjob1.outputs.current_version }}
          commit: main
          # body: ${{ needs.testjob1.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}

  testjob5:
    name: conditional on tags (skipped)
    runs-on: ubuntu-latest
    needs: testjob1
    if: needs.testjob1.outputs.already_in_pypi == 'true'
    steps:
      - name: just echo
        run: echo "Already released into PyPI"

  testjob6:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [testjob1, testjob4]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.testjob1.outputs.already_in_pypi == 'false'
    steps:
      - uses: actions/checkout@v2
      - name: download GitHub artifacts
        run: |
          mkdir -p dist
          cd dist
          curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ needs.testjob1.outputs.current_version }} \
            | jq -r ".assets[] | select(.name | contains(\"${{ env.PKG_NAME }}\")) | .browser_download_url" \
            | wget -i -
          ls
        shell: bash
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
            user: __token__
            password: ${{ secrets.PYPI_API_TOKEN }}
