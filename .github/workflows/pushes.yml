name: Test pushes to branches

on:
  push:
    branches: [ main, twine-for-pypi-upload ]
  workflow_dispatch:

jobs:

  testjob0:
    name: test triggers
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: test
        run: echo hello

  testjob1:
    name: checks
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.current_version.outputs.current_version }}
      release_info: ${{ steps.release_info.outputs.release_info }}
      asset_tgz_url: ${{ steps.release_info.outputs.asset_tgz_url }}
      asset_whl_url: ${{ steps.release_info.outputs.asset_whl_url }}
      upload_url:  ${{ steps.release_info.outputs.upload_url }}
      already_in_pypi: ${{ steps.check_in_pypi.outputs.pypi_versions != '' }}

    steps:
      - uses: actions/checkout@v2

      - name: Get current version
        id: current_version
        run: echo "::set-output name=current_version::$(cat ./version)"

      - name: Get release info
        id: release_info
        run: |
          release_info="$(curl -s https://api.github.com/repos/${{ github.repository }}/releases \
              | jq '.[] | select(.name == "v${{ steps.current_version.outputs.current_version }}")')"
          echo "::set-output name=release_info::$release_info"
          echo "$release_info"

          asset_tgz_url="$(echo "$release_info" \
              | jq -r '.assets[] | select(.name | match("^${{ env.PKG_NAME }}.*\\.tar.gz$")) | .browser_download_url')"
          echo "::set-output name=asset_tgz_url::$asset_tgz_url"
          echo "$asset_tgz_url"

          asset_whl_url="$(echo "$release_info" \
              | jq -r '.assets[] | select(.name | match("^${{ env.PKG_NAME }}.*\\.whl$")) | .browser_download_url')"
          echo "::set-output name=asset_whl_url::$asset_whl_url"
          echo "$asset_whl_url"

          upload_url="$(echo "$release_info" | jq -r '.upload_url')"
          echo "::set-output name=upload_url::$upload_url"
          echo "$upload_url"
        shell: bash

      - name: check if already deployed
        id: check_in_pypi
        # Note. other options:
        #   - use 'pip install --no-deps PKG==VERSION' with current version
        #   - use 'pip index versions PKG==VERSION'
        #     (but it's a kind of experimental feature of pip >= 21.2)
        run: |
          python -m pip install --upgrade pip
          out="$(pip install --use-deprecated=legacy-resolver ${{ env.PKG_NAME }}== 2>&1 \
              | grep -E "Could not find .* ${{ steps.current_version.outputs.current_version }}(,|\))")"
          echo "::set-output name=pypi_versions::$out"
        shell: bash {0}  # to opt-out of default fail-fast behavior

  testjob2:
    name: dump data
    runs-on: ubuntu-latest
    needs: testjob1
    steps:
      - name: dump tags data
        run: |
          ! read -r -d '' msg << EOF
          testjob1 outputs
          ${{ toJson(needs.testjob1.outputs) }}
          ====================
          github context
          ${{ toJson(github) }}
          EOF
          echo "$msg"
          echo "===================="
          echo "environment"
          env

  testjob4:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: testjob1
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: build dist
        id: build_assets
        if: ${{ !(needs.testjob1.outputs.asset_tgz_url && needs.testjob1.outputs.asset_whl_url) }}
        run: |
          mkdir -p dist
          echo somedata | tee "dist/testpkg-${{ needs.testjob1.outputs.current_version }}-py3-none-any.whl" \
            "dist/testpkg-${{ needs.testjob1.outputs.current_version }}"
          tar czf dist/testpkg-${{ needs.testjob1.outputs.current_version }}.tar.gz dist/testpkg-${{ needs.testjob1.outputs.current_version }}
          rm -f dist/testpkg-${{ needs.testjob1.outputs.current_version }}
          ls dist

          asset_tgz_name="$(find dist -name '*.tar.gz' -printf '%f')"
          echo "::set-output name=asset_tgz_name::$asset_tgz_name"

          asset_whl_name="$(find dist -name '*.whl' -printf '%f')"
          echo "::set-output name=asset_whl_name::$asset_whl_name"
        shell: bash

      - name: Create Release
        id: create_release
        if: ${{ ! needs.testjob1.outputs.release_info }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.testjob1.outputs.current_version }}
          release_name: v${{ needs.testjob1.outputs.current_version }}

      - name: Set upload url
        id: upload_url
        if: ${{ !(needs.testjob1.outputs.asset_tgz_url && needs.testjob1.outputs.asset_whl_url) }}
        run: |
          if [[ -n "${{ needs.testjob1.outputs.upload_url }}" ]]; then
            echo "::set-output name=value::${{ needs.testjob1.outputs.upload_url }}"
          else
            echo "::set-output name=value::${{ steps.create_release.outputs.upload_url }}"
          fi

      - name: Upload the source archive
        if: ${{ !needs.testjob1.outputs.asset_tgz_url }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: dist/${{ steps.build_assets.outputs.asset_tgz_name }}
          asset_name: ${{ steps.build_assets.outputs.asset_tgz_name }}
          asset_content_type: application/x-gtar

      - name: Upload the wheel
        if: ${{ !needs.testjob1.outputs.asset_whl_url }} 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: dist/${{ steps.build_assets.outputs.asset_whl_name }}
          asset_name: ${{ steps.build_assets.outputs.asset_whl_name }}
          asset_content_type: application/zip


  testjob6:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [testjob1, testjob4]
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.testjob1.outputs.already_in_pypi == 'false'
    steps:
      - uses: actions/checkout@v2

      - name: download GitHub artifacts
        run: |
          mkdir -p dist
          cd dist
          curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ needs.testjob1.outputs.current_version }} \
            | jq -r ".assets[] | select(.name | contains(\"${{ env.PKG_NAME }}\")) | .browser_download_url" \
            | wget -i -
          ls
        shell: bash

      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@v1.4.2
      #   with:
      #       user: __token__
      #       password: ${{ secrets.PYPI_API_TOKEN }}

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Prepare python env
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade twine
        shell: bash

      - name: Publish to TestPyPI
        if: github.ref != 'refs/heads/main'
        env:
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: python -m twine upload --non-interactive --username __token__ --repository testpypi dist/*
        shell: bash

      - name: Publish to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload --non-interactive --username __token__ dist/*
        shell: bash
